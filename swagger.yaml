openapi: 3.0.0
info:
  title: EasyTrip
  version: 1.0.0
  description: EasyTrip official API
  license:
    name: Licensed Under MIT
    url: https://spdx.org/licenses/MIT.html
  contact:
    name: JSONPlaceholder
    url: https://jsonplaceholder.typicode.com
servers:
  - url: http://localhost:12349
    description: EasyTrip Facade server
  - url: http://localhost:12348
    description: Path Search server
  - url: http://localhost:12347
    description: Point Search server
  - url: http://localhost:12346
    description: OSM Tools server
  - url: http://localhost:12345
    description: Auth Tools server
  
paths:
  '/v1/users/login':
    post:
      summary: Authentication of an user and get a new token
      description: Authentication of an used based on the username and password and get a token
      tags:
        - Auth Tools
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: 'user1'
                password:
                  type: string
                  example: 'user1_password'
      responses:
        '200':
          description: Token sucessfully created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/user'
                  - description: User results object
        '400':
          $ref: '#/components/responses/BadRequest'

  '/v1/users/auth/google':
    post:
      summary: Authentication of an user via google and get a token
      description: Authentication of an user based on the google account and get a token. The user is redirected to the Google Authentication Page; if the authentication ends correctly it returns the username of the user with his email
      tags:
        - Auth Tools
      responses:
        '200':
          description: Token sucessfully created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/user'
                  - description: User results object
        '400':
          $ref: '#/components/responses/BadRequest'

  '/v1/users/signup':
    post:
      summary: Create new user and get a new token
      description: Create a new user and get a token
      tags:
        - Auth Tools
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - passwordConfirm
              properties:
                username:
                  type: string
                  example: 'user1'
                email:
                  type: string
                  example: 'user@domain.com'
                password:
                  type: string
                  example: 'user1_password'
                passwordConfirm:
                  type: string
                  example: 'user1_password'
      responses:
        '200':
          description: New user sucessfully created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/user'
                  - description: User results object
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/ExistingUser'


  '/v1/routing/geocode':
    get:
      summary: Get coordinates and various informations of a given address
      description: Get coordinates and various informations of a given address
      tags:
        - OSM Tools
      parameters:
        - $ref: '#/components/parameters/address'
        - $ref: '#/components/parameters/limit'
        - name: closestTo
          in: query
          description: If specified, the endpoint will return the result closest to this point (if any), otherwise it will return up to <limit> results
          schema:
            $ref: '#/components/schemas/pointStr'
          example: "45.439124213114084,10.994315086270243"
        - name: onlyPlaces
          in: query
          description: If true, results will be only OSM places (es. city, ...)
          schema:
            type: boolean
          example: false
      responses:
        '200':
          description: Geocode results retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  hits:
                    type: array
                    items:
                      $ref: '#/components/schemas/geocode'
                    example:
                      - $ref: 'docExamples/arenaGeocode.json'
                  locale:
                    type: string
                    description: Language used
                    example: "en"
        '400':
          $ref: '#/components/responses/BadRequest'

  '/v1/routing/route':
    get:
      summary: Get the route between two points
      description: Get the route between two points
      tags:
        - OSM Tools
      parameters:
        - name: point
          in: query
          description: Points of the route. You have to specify point singularly (the order count). E.g., &point=45.439124213114084,10.994315086270243&point46.06339563874866,11.114865753180371
          schema:
            type: array
            minItems: 2
            items:
              $ref: '#/components/schemas/pointStr'
          example: ["45.439124213114084,10.994315086270243","46.06339563874866,11.114865753180371"]
        - $ref: '#/components/parameters/profile'
        - name: shortAnswer
          in: query
          description: If true the endpoint will return only information about the route, otherwise it will return points and instructions
          schema:
            type: boolean
          example: false
      responses:
        '200':
          description: Resulting route retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/route'
        '400':
          $ref: '#/components/responses/BadRequest'

  '/v1/locations/poi':
    get:
      summary: Get points of interests within an area
      description: Get points of interests within an area
      tags:
        - OSM Tools
      parameters:
        - $ref: '#/components/parameters/requiredInterest'
        - name: point
          in: query
          description: Center of search (Format <latitude>,<longitude>)
          schema:
            $ref: '#/components/schemas/pointStr'
          example: ["45.438611","10.992778"]
        - name: squareSide
          in: query
          description: Side of the bounding box created from point
          schema:
            type: number
            minimum: 0
            default: 20000
          example: 20000
        - name: bbox
          in: query
          description: If specified, point and squareSide are ignored and this become the area of search
          schema:
            $ref: '#/components/schemas/bboxStr'
          example: "10.8768512,45.3494402,11.1239,45.5418375"
      responses:
        '200':
          description: Resulting points of interests retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: '#/components/schemas/overpassVersion'
                  generator:
                    $ref: '#/components/schemas/overpassGenerator'
                  osm3s:
                    $ref: '#/components/schemas/overpassOsm3s'
                  elements:
                    $ref: '#/components/schemas/poiArray'
        '400':
          $ref: '#/components/responses/BadRequest'

  '/v1/locations/nearbyCities':
    get:
      summary: Get residential areas around a point
      description: Get residential areas around a point
      tags:
        - OSM Tools
      parameters:
        - name: point
          in: query
          description: Center of search (Format <latitude>,<longitude>)
          schema:
            $ref: '#/components/schemas/pointStr'
          example: ["45.438611","10.992778"]
        - name: range
          in: query
          description: Range of search
          schema:
            type: number
            minimum: 0
            default: 5000
          example: 5000
      responses:
        '200':
          description: Resulting cities
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: '#/components/schemas/overpassVersion'
                  generator:
                    $ref: '#/components/schemas/overpassGenerator'
                  osm3s:
                    $ref: '#/components/schemas/overpassOsm3s'
                  elements:
                    $ref: '#/components/schemas/citiesArray'
        '400':
          $ref: '#/components/responses/BadRequest'


  '/v1/weather/current':
    get:
      summary: Get current weather given a certain place
      description: Return the information about the current weather status for the searched city
      tags:
        - Point Search
      parameters:
        - $ref: '#/components/parameters/city'
          description: City on which to get current weather status
      responses:
        '200':
          description: Return a JSON with current weather status on given city
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success of request
                  text:
                    type: string
                    description: description of the current weather status in natural language
                  message:
                    type: string
                    description: current weather statusDocumenti

  '/v1/weather/forecast':
    get:
      summary: Get weather forecast given a certain place
      tags:
        - Point Search
      parameters:
        - $ref: '#/components/parameters/city'
      description: Return an array of weather forecasts up to 16 days for the searched city
      responses:
        '200':
          description: Success 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success of request
                  text:
                    type: string
                    description: description of the weather forecasts for the next 16 days in natuaral language
                  message:
                    type: array
                    description: array of weather forecasts of the next 16 days
                    items:
                      type: string

  '/v1/bikes/networks':
    get:
      summary: Get data about bike sharing available in a certain place
      tags:
        - Point Search
      parameters:
        - $ref: '#/components/parameters/city'
      description: Return information about the bike sharing service available in the searched city
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success of request
                  message:
                    $ref: '#/components/schemas/bikes'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Outcome of the Request
                  message:
                    type: string
                    description: Empty message

  '/v2/combined/about':
    get:
      summary: Get information about weather, bike sharing and points of interest in a certain location based on some choices
      description: Return the information about weather, bike sharing and points of interest in a certain location (can choose if all three fields will be returned or if some of them) based on some interests
      tags:
        - Point Search
      parameters:
        - $ref: '#/components/parameters/address'
        - $ref: '#/components/parameters/weather'
        - $ref: '#/components/parameters/bikes'
        - $ref: '#/components/parameters/interest'
      responses:
        '200':
          description: Object about requested information and points of interest
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/geocode'
                  weather:
                    $ref: '#/components/schemas/weather'
                  bike:
                    $ref: '#/components/schemas/bikes'
                  poi:
                    $ref: '#/components/schemas/poiArray'
        '400':
          $ref: '#/components/responses/BadRequest'


  '/v1/path/stops':
    get:
      summary: Get stops, based on user interests, for a travel
      description: Get stops, based on user interests, for a travel
      tags:
        - Path Search
      parameters:
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/requiredInterest'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/minDistance'
        - $ref: '#/components/parameters/maxDetour'
        - $ref: '#/components/parameters/profile'
        - name: poisDescriptions
          in: query
          description: If false returns a short answer with only the number of points of interests per stop. Otherwise return points of interests in full
          schema:
            type: boolean
            default: true
          example: true
      responses:
        '200':
          description: Resulting stops retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routeStops'
        '400':
          $ref: '#/components/responses/BadRequest'
  '/v1/path/route':
    get:
      summary: Get route with stops based on user interests
      description: Get route with stops based on user interests
      tags:
        - Path Search
      parameters:
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/requiredInterest'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/minDistance'
        - $ref: '#/components/parameters/maxDetour'
        - $ref: '#/components/parameters/profile'
      responses:
        '200':
          $ref: '#/components/responses/pathRoute'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      summary: Get route with stops based on user interests
      description: Get route with stops based on user interests
      tags:
        - Path Search
      parameters:
        - $ref: '#/components/parameters/profile'
      requestBody:
        description: Stops of the route
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stops:
                  $ref: '#/components/schemas/routeStops'
      responses:
        '200':
          $ref: '#/components/responses/pathRoute'
        '400':
          $ref: '#/components/responses/BadRequest'

  '/v1/trip/destination':
    get:
      summary: Get the information the destination of the trip
      description: Return information about the weather, bike sharing and points of interest for the destination of the trip
      tags:
        - EasyTrip Facade
      parameters:
        - $ref: '#/components/parameters/address'
        - $ref: '#/components/parameters/weather'
        - $ref: '#/components/parameters/bikes'
        - $ref: '#/components/parameters/interest'
      responses:
        '200':
          description: Object about requested information and points of interest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endInfo'
        '400':
          $ref: '#/components/responses/BadRequest'

  '/v1/trip/travel':
    get:
      summary: Get information of the travel of the trip
      description: Get information of the travel of the trip
      tags:
        - EasyTrip Facade
      parameters:
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/weather'
        - $ref: '#/components/parameters/bikes'
        - $ref: '#/components/parameters/travelInterest'
        - $ref: '#/components/parameters/travelLimit'
        - $ref: '#/components/parameters/minDistance'
        - $ref: '#/components/parameters/maxDetour'
        - $ref: '#/components/parameters/profile'
      responses:
        '200':
          description: Resoulting travel
          content:
            application/json:
              schema:
                type: object
                properties:
                  start:
                    type: object
                    description: Beginning of the trip
                    properties:
                      address:
                        $ref: '#/components/schemas/start'
                  end:
                    allOf:
                      - $ref: '#/components/schemas/endInfo'
                      - description: Destination of the trip
                  intermediates:
                    type: array
                    description: Intermediary stops
                    items:
                      $ref: '#/components/schemas/intermediateInfo'
                  paths:
                    $ref: '#/components/schemas/paths'
        '400':
          $ref: '#/components/responses/BadRequest'

  '/v1/history':
    post:
      summary: Clean errors and save a research
      description: Clean errors and save a destination or travel research
      tags:
        - EasyTrip Facade
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchToSave'
      responses:
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      summary: Get the history of the research of a user
      description: Return the history of the research of a user (both destination and travel search)
      tags:
        - EasyTrip Facade
      parameters:
        - $ref: '#/components/parameters/token'
          description: token of the user
        
      responses:
        '200':
          description: History of the user retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  history:
                    allOf:
                    - $ref: '#/components/schemas/history'
                    - description: History results object
        '401':
          $ref: '#/components/responses/NoToken'
        '403':
          $ref: '#/components/responses/InvalidToken'
        '500':
          $ref: '#/components/responses/ServerError'                    
  
  '/v1/history/{id}':
    delete:
      summary: Delete a research saved in the history
      description: Delete a research in the history for the user identified by the token and based on the id given
      tags:
        - EasyTrip Facade
      parameters:
        - $ref: '#/components/parameters/token'
          description: token of the user
        - name: id
          in: path
          required: true
          description: The id of the search to delete
          schema:
            type: string
      responses:
        '200':
          description: Search deleted
        '401':
          $ref: '#/components/responses/NoToken'
        '403':
          $ref: '#/components/responses/InvalidToken'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  parameters:
    city:
      name: city
      in: query
      schema:
        type: string
      required: true
    address:
      description: Address to search
      name: address
      in: query
      schema:
        type: string
      required: true
      example: "Verona"
    limit:
      description: Max number of results
      name: limit
      in: query
      schema:
        $ref: '#/components/schemas/limit'
      example: 1
    travelLimit:
      description: Max number of results. If interest is not specified this does not count
      name: limit
      in: query
      schema:
        $ref: '#/components/schemas/limit'
      example: 1
    token:
      name: x-access-token
      in: header
      required: true
      description:  the jwt of the session
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0b3B0YWwuY29tIiwiZXhwIjoxNDI2NDIwODAwLCJodHRwOi8vdG9wdGFsLmNvbS9qd3RfY2xhaW1zL2lzX2FkbWluIjp0cnVlLCJjb21wYW55IjoiVG9wdGFsIiwiYXdlc29tZSI6dHJ1ZX0.yRQYnWzskCZUxPwaQupWkiUzKELZ49eM7oWxAQK_ZXw'
      schema:
        type: string
    weather:
      name: weather
      in: query
      description: describe if in the request user wants weather forecasts
      schema:
        $ref: '#/components/schemas/weatherIndicator'
      example: false
    bikes:
      name: bikes
      in: query
      description: describe if in the request user wants bike sharing
      schema:
        $ref: '#/components/schemas/bikesIndicator'
      example: false
    interest:
      name: interest
      in: query
      description: User interests. If not specified it the searchs won't be performed
      schema:
        $ref: '#/components/schemas/interests'
    requiredInterest:
      name: interest
      in: query
      description: User interests
      required: true
      schema:
        $ref: '#/components/schemas/interests'
    travelInterest:
      name: interest
      in: query
      description: User interests. If not specified it the searchs of point of interests and intermediates stops won't be performed
      schema:
        $ref: '#/components/schemas/interests'
    profile:
      name: profile
      in: query
      description: describe the type of travel
      schema:
        $ref: '#/components/schemas/profile'
      example: "car"
    start:
      description: Starting address
      name: start
      in: query
      schema:
        type: string
      required: true
      example: "Arena Verona"
    end:
      description: Ending address
      name: end
      in: query
      schema:
        type: string
      required: true
      example: "I portoni della brà"
    minDistance:
      name: minDistance
      in: query
      description: Minimum distance between two stops
      schema:
        $ref: '#/components/schemas/minDistance'
      example: 20000
    maxDetour:
      name: maxDetour
      in: query
      description: Max distance of a detour for a stop. It has to be less or equal then minDistance/2, otherwise its default value wil be that value
      schema:
        $ref: '#/components/schemas/maxDetour'
      example: 10000

  schemas:
    limit:
      type: integer
      minimum: 0
    weatherIndicator:
      type: boolean
      description: describe if in the request user wants weather forecasts
      default: false
      example: false
    bikesIndicator:
      type: boolean
      description:  describe if in the request user wants bike sharing
      default: false
      example: false
    interests:
      type: array
      items:
        type: string
        description: interest of the search for the points of interests
        enum:
          - "sustenance"
          - "education"
          - "entertainment"
          - "tourism"
          - "accomodation"
    profile:
      type: string
      description: describe the type of travel. If limit is not specified this does not count
      enum:
        - "car"
        - "foot"
        - "bike"
      default: "car"
      example: "car"
    minDistance:
      type: number
      description: Minimum distance between two stops. If limit is not specified this does not count
      minimum: 0
      default: 20000
      example: 20000
    maxDetour:
      type: number
      description: Max distance of a detour for a stop. It has to be less or equal then minDistance/2, otherwise its default value wil be that value. if minDistance is not specified this does not count
      minimum: 0
      example: 10000
    user:
      type: object
      properties:
        username:
          type: string
          description: username of the user
          example: user1
        token: 
          type: string
          description: token of the user 
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0b3B0YWwuY29tIiwiZXhwIjoxNDI2NDIwODAwLCJodHRwOi8vdG9wdGFsLmNvbS9qd3RfY2xhaW1zL2lzX2FkbWluIjp0cnVlLCJjb21wYW55IjoiVG9wdGFsIiwiYXdlc29tZSI6dHJ1ZX0.yRQYnWzskCZUxPwaQupWkiUzKELZ49eM7oWxAQK_ZXw'
    commonHistoryParameters:
      type: object
      additionalProperties: false
      properties:
        interest:
          $ref: '#/components/schemas/interests'
        weather:
          $ref: '#/components/schemas/weatherIndicator'
        bikes:
          $ref: '#/components/schemas/bikesIndicator'
    travelParameters:
      allOf:
        - type: object
          description: parameters for travel search
          required:
            - start
            - end
          properties:
            start:
              type: string
              description: Starting address
            end:
              type: string
              description: Ending address
            limit:
              allOf:
                - $ref: '#/components/schemas/limit'
                - description: Max number of results. If interest is not specified this does not count
                  default: 0
                  example: 0
            minDistance:
              $ref: '#/components/schemas/minDistance'
            maxDetour:
              $ref: '#/components/schemas/maxDetour'
            profile:
              $ref: '#/components/schemas/profile'
        - $ref: '#/components/schemas/commonHistoryParameters'
    destinationParameters:
      allOf:
        - type: object
          description: parameters for destination search
          required:
            - address
          properties:
            address:
              type: string
              description: Destination address
        - $ref: '#/components/schemas/commonHistoryParameters'
    historyElementBase:
      type: object
      properties:
        route:
          type: string
          description: First part of the endpoint used for the research
        type:
          type: string
          description: Final part of the endpoint used for the research
          enum:
            - travel
            - destination
    searchToSave:
      allOf:
        - $ref: '#/components/schemas/historyElementBase'
        - description: Search information to save
          properties:
            parameters:
              oneOf:
              - $ref: '#/components/schemas/travelParameters'
              - $ref: '#/components/schemas/destinationParameters'
      example:
        $ref: 'docExamples/searchToSave.json'
    historyElementNewParams:
      type: object
      properties:
        _id:
          type: string
          description: ID of the research
        dateTime:
          type: string
          description: date of when the search was made
        url:
          type: string
          description: Path and query to replicate the research
    travelHistoryElement:
      allOf:
        - $ref: '#/components/schemas/historyElementBase'
        - $ref: '#/components/schemas/historyElementNewParams'
        - description: Search information to save
          properties:
            parameters:
              $ref: '#/components/schemas/travelParameters'
    destinationHistoryElement:
      allOf:
        - $ref: '#/components/schemas/historyElementBase'
        - $ref: '#/components/schemas/historyElementNewParams'
        - description: Search information to save
          properties:
            parameters:
              $ref: '#/components/schemas/destinationParameters'
    history:
      type: object
      properties:
        travel:
          type: array
          description: Travel search results
          items:
            $ref: '#/components/schemas/travelHistoryElement'
        destination:
          type: array
          items:
            $ref: '#/components/schemas/destinationHistoryElement'
      example:
        $ref: 'docExamples/history.json'
  
    geocode:
      type: object
      description: Geocode result
      properties:
        point:
          type: object
          properties:
            lat:
              $ref: '#/components/schemas/latitude'
            lng:
              $ref: '#/components/schemas/longitude'
          description: Coordinates
        osm_id:
          type: string
          description: The OSM ID of the entity
        osm_type:
          type: string
          description: N = node, R = relation, W = way
        osm_key:
          type: string
          description: The OSM key of the entity
        osm_value:
          type: string
          description: The OSM value of the entity
        name:
          type: string
          description: The name of the entity. Can be a boundary, POI, address, etc
        country:
          type: string
          description: The country of the address
        countrycode:
          type: string
          description: Code representation of country
        city:
          type: string
          description: The city of the address
        state:
          type: string
          description: The state of the address
        street:
          type: string
          description: The street of the address
        housenumber:
          type: string
          description: The housenumber of the address
        postcode:
          type: string
          description: The postcode of the address
    start:
      allOf:
        - $ref: '#/components/schemas/geocode'
        - example:
            $ref: 'docExamples/arenaGeocode.json'
    end:
      allOf:
        - $ref: '#/components/schemas/geocode'
        - example:
            $ref: 'docExamples/portoniBraGeocode.json'
    intermediate:
      allOf:
        - $ref: '#/components/schemas/geocode'
        - example:
            $ref: 'docExamples/veronaGeocode.json'
    bikes:
      type: object
      properties:
        company:
          type: string
          description: The company providing the bike sharing service
        gbfs_href:
          type: string
          description: Website url of the bike sharing service
        href:
          type: string
          description: resource URI on bike sharing API Website
        id:
          type: string
          description: bike sharing identifier
        location:
          type: object
          properties:
            city:
              type: string
              description: City where the bike sharing service is available
            country:
              type: string
              description: Country where the city is located
            latitude:
              type: number
              description: latitute coordinate value
            longitude:
              type: number
              description: longitude coordinate value
        name:
          type: string
          description: name of the bike sharing service
        source:
          type: string
          description: link web of the bike sharing provider
    weather:
      type: object
      properties:
        current:
          type: string
          description: Current weather status of address
        forecasts:
          type: array
          description: Weather forecasts of the next 16 days
          items:
            type: string
    latitude:
      type: number
      description: Latitude
      minimum: -90
      maximum: 90
    longitude:
      type: number
      description: Longitude
      minimum: -180
      maximum: 180
    pointStr:
      type: string
      description: Coordinates of the format <latitude>,<longitude>
      pattern: '^[+-]?([0-9]*[.])?[0-9]+,[+-]?([0-9]*[.])?[0-9]+$'
    graphhopperResultPoints:
      type: object
      description: Geometry of the route
      properties:
        type:
          type: string
        coordinates:
          type: array
          description: List of coordinate pairs [lon,lat]
          minItems: 2
          maxItems: 2
          items:
            anyOf:
              - $ref: '#/components/schemas/longitude'
              - $ref: '#/components/schemas/latitude'
    bbox:
      type: array
      description: Area delimited by coordinates. Format [minLon, minLat, maxLon, maxLat]
      minItems: 4
      maxItems: 4
      items:
        anyOf:
          - $ref: '#/components/schemas/longitude'
          - $ref: '#/components/schemas/latitude'
    bboxStr:
      type: string
      description: Bounding box ([minLon,minLat,maxLon,maxLat]) of search
      pattern: '^[+-]?([0-9]*[.])?[0-9]+,[+-]?([0-9]*[.])?[0-9]+,[+-]?([0-9]*[.])?[0-9]+,[+-]?([0-9]*[.])?[0-9]+$'
    route:
      type: object
      properties:
        info:
          type: object
          description: Additional information for your request
          properties:
            copyright:
              type: array
              description: Attribution according to Graphhopper documentation is necessary if no white-label option included.
              items:
                type: string
              example: ["GraphHopper","OpenStreetMap contributors"]
            took:
              type: number
              example: 2
        paths:
          $ref: '#/components/schemas/paths'
    paths:
      type: array
      description: Paths available
      items:
        $ref: '#/components/schemas/path'
    path:
      type: object
      properties:
        distance:
          type: number
          description: Total distance, in meters
        time:
          type: integer
          description: Total travel time, in milliseconds
        ascend:
          type: number
          description: Total ascent, in meters
        descend:
          type: number
          description: Total descent, in meters
        points:
          $ref: '#/components/schemas/graphhopperResultPoints'
          description: Geometry of the route
        snapped_waypoints:
          $ref: '#/components/schemas/graphhopperResultPoints'
          description: Snapped input points
        points_encoded:
          type: boolean
          description: Whether the points and snapped_waypoints fields are polyline-encoded strings rather than JSON arrays of coordinates
          enum:
            - false
        bbox:
          $ref: '#/components/schemas/bbox'
          description: Bounding box of the route geometry. Format [minLon, minLat, maxLon, maxLat]
        instructions:
          type: array
          description: The instructions for this route
          items:
            type: object
            properties:
              text:
                type: string
                description: Description what the user has to do in order to follow the route
              street_name:
                type: string
                description: Name of the street to turn onto in order to follow the route
              distance:
                type: number
                description: Distance for this instruction, in meters
              time:
                type: integer
                description: Duration for this instruction, in milliseconds
              interval:
                type: array
                description: Two indices into points, referring to the beginning and the end of the segment of the route this instruction refers to
                minItems: 2
                maxItems: 2
                items:
                  type: integer
              sign:
                type: integer
                description: A number which specifies the (Graphhopper) sign to show
                enum:
                  - -98
                  - -8
                  - -7
                  - -6
                  - -3
                  - -2
                  - -1
                  - 0
                  - 1
                  - 2
                  - 3
                  - 4
                  - 5
                  - 6
                  - 7
                  - 8
              exit_number:
                type: integer
                description: Only available for roundabout instructions (sign is 6). The count of exits at which the route leaves the roundabout
              turn_angle:
                type: number
                description: Only available for roundabout instructions (sign is 6). The radian of the route within the roundabout 0 < r < 2*PI for clockwise and -2*PI < r < 0 for counterclockwise turns
        details:
          type: object
          description: Various etails
      example:
        $ref: 'docExamples/miniPath.json'
    poiArray:
      type: array
      description: Array of POI objects
      items:
        $ref: '#/components/schemas/poi'
      example:
        - $ref: 'docExamples/poi.json'
    citiesArray:
      type: array
      description: Array of cities objects
      items:
        $ref: '#/components/schemas/poi'
      example:
        - $ref: 'docExamples/city.json'
    poi:
      type: object
      properties:
        type:
          type: string
          enum:
            - node
        id:
          type: integer
        lat:
          $ref: '#/components/schemas/latitude'
        lon:
          $ref: '#/components/schemas/longitude'
        tags:
          type: object
          description: Open Street Map tags
    overpassVersion:
      type: number
      description: Version of Overpass API used
      example: 0.6
    overpassGenerator:
      type: string
      description: Generator used to retrieve data
      example: Overpass API 0.7.59 e21c39fe
    overpassOsm3s:
      type: object
      description: Open Street Map information
      properties:
        timestamp_osm_base:
          type: string
          format: date-time
          example: 2023-02-02T23:24:24Z
        copyright:
          type: string
          example: The data included in this document is from www.openstreetmap.org. The data is made available under ODbL.
    routeStops:
      type: object
      properties:
        start:
          allOf:
            - $ref: '#/components/schemas/start'
            - description: Starting stop
        end:
          allOf:
            - $ref: '#/components/schemas/end'
            - description: Ending stop
        intermediates:
          type: array
          description: Intermediary stops
          items:
            type: object
            properties:
              details:
                $ref: '#/components/schemas/intermediate'
              pois:
                $ref: '#/components/schemas/poiArray'
    destinationInfoNoAddr:
      type: object
      properties:
        weather:
          $ref: '#/components/schemas/weather'
        bike:
          $ref: '#/components/schemas/bikes'
        poi:
          $ref: '#/components/schemas/poiArray'
    endInfo:
      allOf:
        - type: object
          properties:
            address:
              $ref: '#/components/schemas/end'
        - $ref: '#/components/schemas/destinationInfoNoAddr'
    intermediateInfo:
      allOf:
        - type: object
          properties:
            address:
              $ref: '#/components/schemas/intermediate'
        - $ref: '#/components/schemas/destinationInfoNoAddr'

  responses:
    NoToken:
      description: No token provided
    InvalidToken:
      description: Invalid token provided
    BadRequest:
      description: Bad request
    ExistingUser:
      description: User already existing
    ServerError:
      description: Server error
    pathRoute:
      description: Resulting route retrieved
      content:
        application/json:
          schema:
            type: object
            properties:
              route:
                $ref: '#/components/schemas/paths'