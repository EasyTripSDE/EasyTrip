openapi: 3.0.0
info:
  title: EasyTrip
  version: 1.0.0
  description: EasyTrip official API
  license:
    name: Licensed Under MIT
    url: https://spdx.org/licenses/MIT.html
  contact:
    name: JSONPlaceholder
    url: https://jsonplaceholder.typicode.com
servers:
  - url: http://localhost:12349
    description: EasyTrip Facade server
  - url: http://localhost:12348
    description: Path Search server
  - url: http://localhost:12347
    description: Point Search server
  - url: http://localhost:12346
    description: OSM Tools server
  - url: http://localhost:12345
    description: Auth Tools server
  
paths:
  '/v1/users/login':
    post:
      summary: Authentication of an user and get a new token
      description: Authentication of an used based on the username and password and get a token
      tags:
        - Auth Tools
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - "username"
                - "password"
              properties:
                username:
                  type: string
                  example: 'user1'
                password:
                  type: string
                  example: 'user1_password'
      responses:
        '200':
          description: Token sucessfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
                description: User results object
        '400':
          $ref: '#/components/responses/BadRequest'

  '/v1/users/auth/google':
    post:
      summary: Authentication of an user via google and get a token
      description: Authentication of an user based on the google account and get a token. The user is redirected to the Google Authentication Page; if the authentication ends correctly it returns the username of the user with his email
      tags:
        - Auth Tools
      responses:
        '200':
          description: Token sucessfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
                description: User results object
        '400':
          $ref: '#/components/responses/BadRequest'

  '/v1/users/signup':
    post:
      summary: Create new user and get a new token
      description: Create a new user and get a token
      tags:
        - Auth Tools
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - "username"
                - "email"
                - "password"
                - "passwordConfirm"
              properties:
                username:
                  type: string
                  example: 'user1'
                email:
                  type: string
                  example: 'user@domain.com'
                password:
                  type: string
                  example: 'user1_password'
                passwordConfirm:
                  type: string
                  example: 'user1_password'
      responses:
        '200':
          description: New user sucessfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
                description: User results object
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/ExistingUser'


  '/v1/routing/geocode':
    get:
      summary: Get coordinates and various informations of a given address
      description: Get coordinates and various informations of a given address
      tags:
        - OSM Tools
      parameters:
        - $ref: '#/components/parameters/address'
          description: Address to do geocode
        - $ref: '#/components/parameters/limit'
          description: Max number of geocode results
      responses:
        '200':
          description: Geocode results retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/geocode'
                description: Geocode results object
        '400':
          $ref: '#/components/responses/BadRequest'
        
  '/v1/weather/current':
    get:
      summary: Get current weather given a certain place
      description: Return the information about the current weather status for the searched city
      tags:
        - Point Search
      parameters:
        - $ref: '#/components/parameters/city'
          description: City on which to get current weather status
      responses:
        '200':
          description: Return a JSON with current weather status on given city
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success of request
                  text:
                    type: string
                    description: description of the current weather status in natural language
                  message:
                    type: string
                    description: current weather statusDocumenti
  '/v1/weather/forecast':
    get:
      summary: Get weather forecast given a certain place
      tags:
        - Point Search
      parameters:
        - $ref: '#/components/parameters/city'
      description: Return an array of weather forecasts up to 16 days for the searched city
      responses:
        '200':
          description: Success 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success of request
                  text:
                    type: string
                    description: description of the weather forecasts for the next 16 days in natuaral language
                  message:
                    type: array
                    description: array of weather forecasts of the next 16 days
  '/v1/bikes/networks':
    get:
      summary: Get data about bike sharing available in a certain place
      tags:
        - Point Search
      parameters:
        - $ref: '#/components/parameters/city'
      description: Return information about the bike sharing service available in the searched city
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success of request
                  message:
                    $ref: '#/components/schemas/bikes'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Outcome of the Request
                  message:
                    type: string
                    description: Empty message
#interest=sustenance&interest=tourism
  '/v2/combined/about':
    get:
      summary: Get information about weather, bike sharing and points of interest in a certain location based on some choices
      description: Return the information about weather, bike sharing and points of interest in a certain location (can choose if all three fields will be returned or if some of them) based on some interests
      tags:
        - Point Search
      parameters:
        - $ref: '#/components/parameters/address'
          description: address of the destination
        - $ref: '#/components/parameters/weather'
          description: describe if in the request user wants weather forecasts
        - $ref: '#/components/parameters/bikes'
          description: describe if in the request user wants bike sharing
        - $ref: '#/components/parameters/interest'
          description: user interests for point of interest search
      responses:
        '200':
          description: Object about requested information and points of interest
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/geocode'
                  weather:
                    $ref: '#/components/schemas/weather'
                  bike:
                    $ref: '#/components/schemas/bikes'
                  poi:
                    $ref: '#/components/schemas/poi'
        '400':
          $ref: '#/components/responses/BadRequest'
  '/v1/trip/destination':
    get:
      summary: Get the information the destination of the trip
      description: Return information about the weather, bike sharing and points of interest for the destination of the trip
      tags:
        - EasyTrip Facade
      parameters:
        - $ref: '#/components/parameters/address'
          description: address of the destination
        - $ref: '#/components/parameters/weather'
          description: describe if in the request user wants weather forecasts
        - $ref: '#/components/parameters/bikes'
          description: describe if in the request user wants bike sharing
        - $ref: '#/components/parameters/interest'
          description: user interests for point of interest search. If not specified it the search won't be performed
      responses:
        '200':
          description: Object about requested information and points of interest
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/geocode'
                  weather:
                    $ref: '#/components/schemas/weather'
                  bike:
                    $ref: '#/components/schemas/bikes'
                  poi:
                    $ref: '#/components/schemas/poi'
        '400':
          $ref: '#/components/responses/BadRequest'

  '/v1/trip/travel':
    get:
      summary: a
      description: a
      tags:
        - EasyTrip Facade
      responses:
        '200':
          description: a
                        
  '/v1/history':
    get:
      summary: Get the history of the research of a user
      description: Return the history of the research of a user (both destination and travel search)
      tags:
        - EasyTrip Facade
      parameters:
        - $ref: '#/components/parameters/token'
          description: token of the user
        
      responses:
        '200':
          description: History of the user retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/history'
                description: History results object
        '401':
          $ref: '#/components/responses/NoToken'
        '403':
          $ref: '#/components/responses/InvalidToken'
        '500':
          $ref: '#/components/responses/ServerError'                    
  
  '/v1/history/{id}':
    delete:
      summary: Delete a research saved in the history
      description: Delete a research in the history for the user identified by the token and based on the id given
      tags:
        - EasyTrip Facade
      parameters:
        - $ref: '#/components/parameters/token'
          description: token of the user
        - name: id
          in: path
          required: true
          description: The id of the search to delete
          schema:
            type: string
      responses:
        '200':
          description: Search deleted
        '401':
          $ref: '#/components/responses/NoToken'
        '403':
          $ref: '#/components/responses/InvalidToken'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  parameters:
    city:
      name: city
      in: query
      schema:
        type: string
      required: true
    address:
      name: address
      in: query
      schema:
        type: string
      required: true
    limit:
      name: limit
      in: query
      schema:
        type: integer
    token:
      name: x-access-token
      in: header
      required: true
      description:  the jwt of the session
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0b3B0YWwuY29tIiwiZXhwIjoxNDI2NDIwODAwLCJodHRwOi8vdG9wdGFsLmNvbS9qd3RfY2xhaW1zL2lzX2FkbWluIjp0cnVlLCJjb21wYW55IjoiVG9wdGFsIiwiYXdlc29tZSI6dHJ1ZX0.yRQYnWzskCZUxPwaQupWkiUzKELZ49eM7oWxAQK_ZXw'
      schema:
        type: string
    weather:
      name: weather
      in: query
      schema:
        type: boolean
    bikes:
      name: bikes
      in: query
      schema:
        type: boolean
    interest:
      name: interest
      in: query
      schema:
        type: array
        items:
          type: string
          description: interest of the search for the point of interests
  schemas:
    user:   
      type: object
      properties:
        username:
          type: string
          description: username of the user
          example: user1
        token: 
          type: string
          description: token of the user 
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0b3B0YWwuY29tIiwiZXhwIjoxNDI2NDIwODAwLCJodHRwOi8vdG9wdGFsLmNvbS9qd3RfY2xhaW1zL2lzX2FkbWluIjp0cnVlLCJjb21wYW55IjoiVG9wdGFsIiwiYXdlc29tZSI6dHJ1ZX0.yRQYnWzskCZUxPwaQupWkiUzKELZ49eM7oWxAQK_ZXw'
    history:
      type: object
      properties:
        travel:
          type: array
          items:
            type: object
            description: Travel search result 
            properties:
              dateTime:
                type: string
                description: date of when the search was made
              parameters:
                type: object
                description: parameters of the search
                properties:
                  _id:
                    type: string
                    description: id of the search saved
                  url:
                    type: string
                    description: url associated with the request
                  start:
                    type: string
                    description: start point of the travel
                  end:
                    type: string
                    description: end point of the travel
                  interest:
                    type: array
                    items:
                      type: string
                      description: interest of the search for the point of interests
                  bike:
                    type: boolean
                    description: describe if in the request user wants bike sharing
                  weather:
                    type: boolean
                    description: describe if in the request user wants weather forecasts
                  limit:
                    type: number
                    description: maximum number of intermediate cities
                  minDistance:
                    type: number
                    description: Minimum distance between two intermediate cities
                  maxDetour:
                    type: number
                    description: max detour to find intermediate cities
                  profile:
                    type: string
                    description: describe the type of travel
                  route:
                    type: string
                    description: define the endpoint used
        destination:
          type: array
          items:
            type: object
            description: Destination search result 
            properties:
              dateTime:
                type: string
                description: date of when the search was made
              parameters:
                type: object
                description: parameters of the search
                properties:
                  _id:
                    type: string
                    description: id of the search saved
                  url:
                    type: string
                    description: url associated with the request
                  address:
                    type: string
                    description: address of the destination
                  interest:
                    type: array
                    items:
                      type: string
                      description: interest of the search for the point of interests
                  bike:
                    type: boolean
                    description: describe if in the request user wants bike sharing
                  weather:
                    type: boolean
                    description: describe if in the request user wants weather forecasts
                  route:
                    type: string
                    description: define the endpoint used
    geocode:
      type: object
      properties:
        hits:
          type: array
          items:
            type: object
            description: Geocode result
            properties:
              point:
                type: object
                description: Coordinates
                properties:
                  lat:
                    type: number
                    description: Latitude
                  lng:
                    type: number
                    description: Longitude
              osm_id:
                type: string
                description: The OSM ID of the entity
              osm_type:
                type: string
                description: N = node, R = relation, W = way
              osm_key:
                type: string
                description: The OSM key of the entity
              name:
                type: string
                description: The name of the entity. Can be a boundary, POI, address, etc
              country:
                type: string
                description: The country of the address
              city:
                type: string
                description: The city of the address
              state:
                type: string
                description: The state of the address
              street:
                type: string
                description: The street of the address
              housenumber:
                type: string
                description: The housenumber of the address
              postcode:
                type: string
                description: The postcode of the address
    bikes:
      type: object
      properties:
        company:
          type: string
          description: The company providing the bike sharing service
        gbfs_href:
          type: string
          description: Website url of the bike sharing service
        href:
          type: string
          description: resource URI on bike sharing API Website
        id:
          type: string
          description: bike sharing identifier
        location:
          type: object
          properties:
            city:
              type: string
              description: City where the bike sharing service is available
            country:
              type: string
              description: Country where the city is located
            latitude:
              type: number
              description: latitute coordinate value
            longitude:
              type: number
              description: longitude coordinate value
        name:
          type: string
          description: name of the bike sharing service
        source:
          type: string
          description: link web of the bike sharing provider
    weather:
      type: object
      properties:
        current:
          type: string
          description: Current weather status of address
        forecasts:
          type: array
          description: Weather forecasts of the next 16 days
          items:
            type: string
    poi:
      type: array
      description: array of POI objects
  responses:
    NoToken:
      description: No token provided
    InvalidToken:
      description: Invalid token provided
    BadRequest:
      description: Bad request
    ExistingUser:
      description: User already existing
    ServerError:
      description: Server error